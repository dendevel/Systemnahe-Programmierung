
Kammerton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000751  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000673  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000016d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 84 00 	call	0x108	; 0x108 <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
 *  Author: dengl
 */ 

#include "kammerton.h"

ISR (INT0_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
	//set timer TOP to 70 (tone A)
	OCR0A = 70;
  8c:	86 e4       	ldi	r24, 0x46	; 70
  8e:	87 bd       	out	0x27, r24	; 39
}
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <__vector_2>:

ISR (INT1_vect){
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
	//set timer TOP to 117 (tone C)
	OCR0A = 117;
  a8:	85 e7       	ldi	r24, 0x75	; 117
  aa:	87 bd       	out	0x27, r24	; 39
}
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_14>:

ISR (TIMER0_COMPA_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
	//invert pins
	PORTB = ~PORTB;
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	80 95       	com	r24
  c8:	85 b9       	out	0x05, r24	; 5
}
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <kammerton>:

void kammerton(){
	
	//set PIND2 & PIND3 as input
	DDRD &= ~(1 << PIND2);
  d6:	52 98       	cbi	0x0a, 2	; 10
	DDRD &= ~(1 << PIND3);
  d8:	53 98       	cbi	0x0a, 3	; 10
	
	//set PINB0 as output
	DDRB |= (1 << DDB0);
  da:	20 9a       	sbi	0x04, 0	; 4
	
	//set INT0 & INT1 trigger to any logic
	EICRA |= (1 << ISC00) | (1 << ISC10);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	85 60       	ori	r24, 0x05	; 5
  e4:	80 83       	st	Z, r24
	//turn on INT0 & INT1 trigger
	EIMSK |= (1 << INT0) | (1 << INT1);
  e6:	8d b3       	in	r24, 0x1d	; 29
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	8d bb       	out	0x1d, r24	; 29
	
	//set timer mode to CTC
	TCCR0A |= (1 << WGM01);
  ec:	84 b5       	in	r24, 0x24	; 36
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	84 bd       	out	0x24, r24	; 36

	//Set the ISR COMPA vect
	TIMSK0 |= (1 << OCIE0A);
  f2:	ee e6       	ldi	r30, 0x6E	; 110
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24

	//tone starts after pushing a button
	OCR0A = 0;
  fc:	17 bc       	out	0x27, r1	; 39
	
	//enable interrupts
	sei();
  fe:	78 94       	sei
	
	//set prescaler to 256 and start timer
	TCCR0B |= (1 << CS02);
 100:	85 b5       	in	r24, 0x25	; 37
 102:	84 60       	ori	r24, 0x04	; 4
 104:	85 bd       	out	0x25, r24	; 37
 106:	08 95       	ret

00000108 <main>:
 */ 
#include "kammerton.h"

int main(void)
{
    kammerton();
 108:	0e 94 6b 00 	call	0xd6	; 0xd6 <kammerton>
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x4>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>


Dimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000150  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000813  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072a  00000000  00000000  00000ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000383  00000000  00000000  000011dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bf  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006e  00000000  00000000  00001977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  9e:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pulseStep>:
/* increasing and decreasing brightness of led between min and max value depending on direction */
void pulseStep(int min, int max){
	static int direction = 1;
	static int brightness = 0;	
	
	direction = ((brightness == max && direction > 0) || (brightness == min && direction < 0)) ? -direction : direction;
  a6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
  aa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
  ae:	26 17       	cp	r18, r22
  b0:	37 07       	cpc	r19, r23
  b2:	39 f4       	brne	.+14     	; 0xc2 <pulseStep+0x1c>
  b4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
  b8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
  bc:	14 16       	cp	r1, r20
  be:	15 06       	cpc	r1, r21
  c0:	4c f0       	brlt	.+18     	; 0xd4 <pulseStep+0x2e>
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	71 f4       	brne	.+28     	; 0xe4 <pulseStep+0x3e>
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  d0:	99 23       	and	r25, r25
  d2:	44 f4       	brge	.+16     	; 0xe4 <pulseStep+0x3e>
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  dc:	91 95       	neg	r25
  de:	81 95       	neg	r24
  e0:	91 09       	sbc	r25, r1
  e2:	04 c0       	rjmp	.+8      	; 0xec <pulseStep+0x46>
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	OCR0A = brightness;
  f4:	27 bd       	out	0x27, r18	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	8f e3       	ldi	r24, 0x3F	; 63
  f8:	9c e9       	ldi	r25, 0x9C	; 156
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <pulseStep+0x54>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <pulseStep+0x5a>
 100:	00 00       	nop
	_delay_ms(10);
	brightness += direction;
 102:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 106:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 112:	82 0f       	add	r24, r18
 114:	93 1f       	adc	r25, r19
 116:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 11a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 11e:	08 95       	ret

00000120 <init>:
#include "dimmer.h"

/* function implementations */
void init(void){
	// PD6 is now an output
	DDRD |= (1 << DDD6);
 120:	56 9a       	sbi	0x0a, 6	; 10

	// set PWM for 100% duty cycle
	OCR0A = 255;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bd       	out	0x27, r24	; 39

	// set none-inverting mode
	TCCR0A |= (1 << COM0A1);
 126:	84 b5       	in	r24, 0x24	; 36
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	84 bd       	out	0x24, r24	; 36

	// set fast PWM Mode, TOP=0xFF
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 12c:	84 b5       	in	r24, 0x24	; 36
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	84 bd       	out	0x24, r24	; 36

	// set prescaler to 8 and start PWM
	TCCR0B |= (1 << CS01);
 132:	85 b5       	in	r24, 0x25	; 37
 134:	82 60       	ori	r24, 0x02	; 2
 136:	85 bd       	out	0x25, r24	; 37
 138:	08 95       	ret

0000013a <main>:
}


int main(void)
{
	init();
 13a:	0e 94 90 00 	call	0x120	; 0x120 <init>
	
	while (1)
	{
		pulseStep(0,255);
 13e:	6f ef       	ldi	r22, 0xFF	; 255
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <pulseStep>
 14a:	f9 cf       	rjmp	.-14     	; 0x13e <main+0x4>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>

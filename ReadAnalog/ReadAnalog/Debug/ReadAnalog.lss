
ReadAnalog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  0000035a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8a  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bf  00000000  00000000  00000ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cc  00000000  00000000  000017b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000491  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000293  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000253c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  9e:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:

void adc_init_10(){	
	adc_init();
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
	sei();
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
  c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <adc_init_8>:
}


void adc_init_8(){	
	adc_init();
  d4:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	ADMUX |= (1 << ADLAR);   // set up for 8 bit resolution
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	sei();
  ec:	78 94       	sei
  ee:	08 95       	ret

000000f0 <echo>:


volatile uint8_t ADCvalue;    		// Global variable, set to volatile if used with ISR

void echo(){
	usart_send(usart_receive());
  f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <usart_receive>
  f4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_send>
  f8:	08 95       	ret

000000fa <main>:
}

int main(void)
{
	adc_init_8();
  fa:	0e 94 6a 00 	call	0xd4	; 0xd4 <adc_init_8>
	usart_init(echo);
  fe:	88 e7       	ldi	r24, 0x78	; 120
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 cc 00 	call	0x198	; 0x198 <usart_init>
 106:	ff cf       	rjmp	.-2      	; 0x106 <main+0xc>

00000108 <__vector_21>:
	}
}


ISR(ADC_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	2a 97       	sbiw	r28, 0x0a	; 10
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
	cli();
 138:	f8 94       	cli
	ADCvalue = ADCH;          // only need to read the high value for 8 bit
 13a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 13e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	char buffer [10];
	itoa(ADCvalue, buffer, 10);
 142:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 146:	4a e0       	ldi	r20, 0x0A	; 10
 148:	be 01       	movw	r22, r28
 14a:	6f 5f       	subi	r22, 0xFF	; 255
 14c:	7f 4f       	sbci	r23, 0xFF	; 255
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 2a 01 	call	0x254	; 0x254 <__itoa_ncheck>
	usart_send_string(buffer);
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <usart_send_string>
	usart_send_string("\n\r");
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <usart_send_string>
	sei();
 164:	78 94       	sei
}
 166:	2a 96       	adiw	r28, 0x0a	; 10
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <usart_init>:
 198:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <f+0x1>
 19c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <f>
 1a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1a4:	87 e6       	ldi	r24, 0x67	; 103
 1a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 1aa:	e1 ec       	ldi	r30, 0xC1	; 193
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	88 61       	ori	r24, 0x18	; 24
 1b2:	80 83       	st	Z, r24
 1b4:	80 81       	ld	r24, Z
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 83       	st	Z, r24
 1ba:	e2 ec       	ldi	r30, 0xC2	; 194
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	86 60       	ori	r24, 0x06	; 6
 1c2:	80 83       	st	Z, r24
 1c4:	78 94       	sei
 1c6:	08 95       	ret

000001c8 <usart_send>:
 1c8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	90 81       	ld	r25, Z
 1ce:	95 ff       	sbrs	r25, 5
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <usart_send+0x4>
 1d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1d6:	08 95       	ret

000001d8 <usart_send_string>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	88 81       	ld	r24, Y
 1e0:	88 23       	and	r24, r24
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <usart_send_string+0x18>
 1e4:	21 96       	adiw	r28, 0x01	; 1
 1e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_send>
 1ea:	89 91       	ld	r24, Y+
 1ec:	81 11       	cpse	r24, r1
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <usart_send_string+0xe>
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <usart_receive>:
 1f6:	e0 ec       	ldi	r30, 0xC0	; 192
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	ec f7       	brge	.-6      	; 0x1fa <usart_receive+0x4>
 200:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 204:	08 95       	ret

00000206 <__vector_18>:
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
 228:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <f>
 22c:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <f+0x1>
 230:	09 95       	icall
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <__itoa_ncheck>:
 254:	bb 27       	eor	r27, r27
 256:	4a 30       	cpi	r20, 0x0A	; 10
 258:	31 f4       	brne	.+12     	; 0x266 <__itoa_ncheck+0x12>
 25a:	99 23       	and	r25, r25
 25c:	22 f4       	brpl	.+8      	; 0x266 <__itoa_ncheck+0x12>
 25e:	bd e2       	ldi	r27, 0x2D	; 45
 260:	90 95       	com	r25
 262:	81 95       	neg	r24
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	0c 94 36 01 	jmp	0x26c	; 0x26c <__utoa_common>

0000026a <__utoa_ncheck>:
 26a:	bb 27       	eor	r27, r27

0000026c <__utoa_common>:
 26c:	fb 01       	movw	r30, r22
 26e:	55 27       	eor	r21, r21
 270:	aa 27       	eor	r26, r26
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	aa 1f       	adc	r26, r26
 278:	a4 17       	cp	r26, r20
 27a:	10 f0       	brcs	.+4      	; 0x280 <__utoa_common+0x14>
 27c:	a4 1b       	sub	r26, r20
 27e:	83 95       	inc	r24
 280:	50 51       	subi	r21, 0x10	; 16
 282:	b9 f7       	brne	.-18     	; 0x272 <__utoa_common+0x6>
 284:	a0 5d       	subi	r26, 0xD0	; 208
 286:	aa 33       	cpi	r26, 0x3A	; 58
 288:	08 f0       	brcs	.+2      	; 0x28c <__utoa_common+0x20>
 28a:	a9 5d       	subi	r26, 0xD9	; 217
 28c:	a1 93       	st	Z+, r26
 28e:	00 97       	sbiw	r24, 0x00	; 0
 290:	79 f7       	brne	.-34     	; 0x270 <__utoa_common+0x4>
 292:	b1 11       	cpse	r27, r1
 294:	b1 93       	st	Z+, r27
 296:	11 92       	st	Z+, r1
 298:	cb 01       	movw	r24, r22
 29a:	0c 94 4f 01 	jmp	0x29e	; 0x29e <strrev>

0000029e <strrev>:
 29e:	dc 01       	movw	r26, r24
 2a0:	fc 01       	movw	r30, r24
 2a2:	67 2f       	mov	r22, r23
 2a4:	71 91       	ld	r23, Z+
 2a6:	77 23       	and	r23, r23
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <strrev+0x4>
 2aa:	32 97       	sbiw	r30, 0x02	; 2
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <strrev+0x18>
 2ae:	7c 91       	ld	r23, X
 2b0:	6d 93       	st	X+, r22
 2b2:	70 83       	st	Z, r23
 2b4:	62 91       	ld	r22, -Z
 2b6:	ae 17       	cp	r26, r30
 2b8:	bf 07       	cpc	r27, r31
 2ba:	c8 f3       	brcs	.-14     	; 0x2ae <strrev+0x10>
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>

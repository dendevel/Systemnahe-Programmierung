
Ampel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000869  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f3  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000378  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  000018e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "trafficcontrol.h"

int main(void)
{
	//set PB1-PB3 as output
	DDRB |= (1 << PINB1) | (1 << PINB2) | (1 << PINB3);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 60       	ori	r24, 0x0E	; 14
  84:	84 b9       	out	0x04, r24	; 4
	
    /* Replace with your application code */
    while (1) 
    {
		traffic_light();
  86:	0e 94 4a 00 	call	0x94	; 0x94 <traffic_light>
  8a:	fd cf       	rjmp	.-6      	; 0x86 <main+0x6>

0000008c <reset_all>:
#include "trafficcontrol.h"

void reset_all(void){
	CLEAR_BIT(PORTB, RED);
  8c:	29 98       	cbi	0x05, 1	; 5
	CLEAR_BIT(PORTB, YELLOW);
  8e:	2a 98       	cbi	0x05, 2	; 5
	CLEAR_BIT(PORTB, GREEN);
  90:	2b 98       	cbi	0x05, 3	; 5
  92:	08 95       	ret

00000094 <traffic_light>:
}

void traffic_light(void){
	//make sure all LEDs are turned off
	reset_all();
  94:	0e 94 46 00 	call	0x8c	; 0x8c <reset_all>
	
	//set red LED on HIGH
	SET_BIT(PORTB, RED);
  98:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	83 ed       	ldi	r24, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <traffic_light+0xc>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <traffic_light+0x16>
  aa:	00 00       	nop
	_delay_ms(1000);

	//set yellow LED on HIGH additionally to red LED
	SET_BIT(PORTB, YELLOW);
  ac:	2a 9a       	sbi	0x05, 2	; 5
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	81 ee       	ldi	r24, 0xE1	; 225
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <traffic_light+0x20>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <traffic_light+0x2a>
  be:	00 00       	nop
	_delay_ms(100);

	//set red and yellow LED to LOW and green to HIGH
	CLEAR_BIT(PORTB, RED);
  c0:	29 98       	cbi	0x05, 1	; 5
	CLEAR_BIT(PORTB, YELLOW);
  c2:	2a 98       	cbi	0x05, 2	; 5
	SET_BIT(PORTB, GREEN);
  c4:	2b 9a       	sbi	0x05, 3	; 5
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <traffic_light+0x38>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <traffic_light+0x42>
  d6:	00 00       	nop
	_delay_ms(1000);

	//set green LED to LOW and yellow LED to HIGH
	CLEAR_BIT(PORTB, GREEN);
  d8:	2b 98       	cbi	0x05, 3	; 5
	SET_BIT(PORTB, YELLOW);
  da:	2a 9a       	sbi	0x05, 2	; 5
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	81 ee       	ldi	r24, 0xE1	; 225
  e0:	94 e0       	ldi	r25, 0x04	; 4
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <traffic_light+0x4e>
  ea:	00 c0       	rjmp	.+0      	; 0xec <traffic_light+0x58>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>

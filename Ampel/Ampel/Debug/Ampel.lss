
Ampel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c5  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073e  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a8  00000000  00000000  0000121b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c7  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 00 	call	0x88	; 0x88 <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:
}

void mainloop(){
	while (1)
	{
		traffic_light();
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 60       	ori	r24, 0x0E	; 14
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <main>:
	}
}

int main(void)
{	
	init();
  88:	0e 94 40 00 	call	0x80	; 0x80 <init>
}

void mainloop(){
	while (1)
	{
		traffic_light();
  8c:	0e 94 4d 00 	call	0x9a	; 0x9a <traffic_light>
  90:	fd cf       	rjmp	.-6      	; 0x8c <main+0x4>

00000092 <reset_all>:

#include "trafficcontrol.h"

void reset_all(void){
	//set all pins to LOW
	CLEAR_BIT(PORTB, RED);
  92:	29 98       	cbi	0x05, 1	; 5
	CLEAR_BIT(PORTB, YELLOW);
  94:	2a 98       	cbi	0x05, 2	; 5
	CLEAR_BIT(PORTB, GREEN);
  96:	2b 98       	cbi	0x05, 3	; 5
  98:	08 95       	ret

0000009a <traffic_light>:
}

void traffic_light(){
	//make sure all LEDs are turned off
	reset_all();
  9a:	0e 94 49 00 	call	0x92	; 0x92 <reset_all>
	
	//set red LED on HIGH
	SET_BIT(PORTB, RED);
  9e:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <traffic_light+0xc>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <traffic_light+0x16>
  b0:	00 00       	nop
	_delay_ms(DURATION_RED);

	//set yellow LED on HIGH additionally to red LED
	SET_BIT(PORTB, YELLOW);
  b2:	2a 9a       	sbi	0x05, 2	; 5
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	81 ee       	ldi	r24, 0xE1	; 225
  b8:	94 e0       	ldi	r25, 0x04	; 4
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <traffic_light+0x20>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <traffic_light+0x2a>
  c4:	00 00       	nop
	_delay_ms(DURATION_RED_YELLOW);

	//set red and yellow LED to LOW and green to HIGH
	CLEAR_BIT(PORTB, RED);
  c6:	29 98       	cbi	0x05, 1	; 5
	CLEAR_BIT(PORTB, YELLOW);
  c8:	2a 98       	cbi	0x05, 2	; 5
	SET_BIT(PORTB, GREEN);
  ca:	2b 9a       	sbi	0x05, 3	; 5
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ed       	ldi	r24, 0xD3	; 211
  d0:	90 e3       	ldi	r25, 0x30	; 48
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <traffic_light+0x38>
  da:	00 c0       	rjmp	.+0      	; 0xdc <traffic_light+0x42>
  dc:	00 00       	nop
	_delay_ms(DURATION_GREEN);

	//set green LED to LOW and yellow LED to HIGH
	CLEAR_BIT(PORTB, GREEN);
  de:	2b 98       	cbi	0x05, 3	; 5
	SET_BIT(PORTB, YELLOW);
  e0:	2a 9a       	sbi	0x05, 2	; 5
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	81 ee       	ldi	r24, 0xE1	; 225
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <traffic_light+0x4e>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <traffic_light+0x58>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>

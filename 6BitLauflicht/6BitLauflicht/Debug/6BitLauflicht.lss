
6BitLauflicht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000014a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081d  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000735  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000371  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006e  00000000  00000000  0000196f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  9e:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lauflicht>:
void lauflicht(int min, int max){
	static int dir = 1;
	static int pin = 0;
	//set light direction
	//if maximum or minimum reached, change direction, else keep 
	dir = ((pin == max && dir > 0) || (pin == min && dir < 0)) ? -dir : dir;
  a6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
  aa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
  ae:	26 17       	cp	r18, r22
  b0:	37 07       	cpc	r19, r23
  b2:	39 f4       	brne	.+14     	; 0xc2 <lauflicht+0x1c>
  b4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
  b8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
  bc:	14 16       	cp	r1, r20
  be:	15 06       	cpc	r1, r21
  c0:	4c f0       	brlt	.+18     	; 0xd4 <lauflicht+0x2e>
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	71 f4       	brne	.+28     	; 0xe4 <lauflicht+0x3e>
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  d0:	99 23       	and	r25, r25
  d2:	44 f4       	brge	.+16     	; 0xe4 <lauflicht+0x3e>
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  dc:	91 95       	neg	r25
  de:	81 95       	neg	r24
  e0:	91 09       	sbc	r25, r1
  e2:	04 c0       	rjmp	.+8      	; 0xec <lauflicht+0x46>
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	PORTB = (1 << pin);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <lauflicht+0x58>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	2a 95       	dec	r18
 100:	e2 f7       	brpl	.-8      	; 0xfa <lauflicht+0x54>
 102:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	83 ed       	ldi	r24, 0xD3	; 211
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <lauflicht+0x64>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lauflicht+0x6e>
 114:	00 00       	nop
	_delay_ms(INTERVAL);
	pin += dir;
 116:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 11a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 126:	82 0f       	add	r24, r18
 128:	93 1f       	adc	r25, r19
 12a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 12e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 132:	08 95       	ret

00000134 <main>:
#include <avr/io.h>
#include "lauflicht.h"

void init() {
	// set pins PB0-PB5 as output
	DDRB = 0b00111111;
 134:	8f e3       	ldi	r24, 0x3F	; 63
 136:	84 b9       	out	0x04, r24	; 4
{
	
	init();
    /* Replace with your application code */
    while(1){
		lauflicht(0,5);
 138:	65 e0       	ldi	r22, 0x05	; 5
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <lauflicht>
 144:	f9 cf       	rjmp	.-14     	; 0x138 <main+0x4>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>


6BitLauflicht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000188  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084c  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074f  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ab  00000000  00000000  0000127b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e4  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  9e:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setPin>:
#include <stdio.h>

//first 6 pins on PortB (index <= 5)
//next 6 pins on PortC (index >= 6)
void setPin(int pinIndex){
	if(pinIndex >= 0 && pinIndex <= 5){
  a6:	86 30       	cpi	r24, 0x06	; 6
  a8:	91 05       	cpc	r25, r1
  aa:	58 f4       	brcc	.+22     	; 0xc2 <setPin+0x1c>
		PORTB = (1 << pinIndex);
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	a9 01       	movw	r20, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <setPin+0x12>
  b4:	44 0f       	add	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <setPin+0xe>
  bc:	45 b9       	out	0x05, r20	; 5
		PORTC = 0;
  be:	18 b8       	out	0x08, r1	; 8
  c0:	08 95       	ret
	}
	else if (pinIndex >= 6 && pinIndex <= 11){
  c2:	9c 01       	movw	r18, r24
  c4:	26 50       	subi	r18, 0x06	; 6
  c6:	31 09       	sbc	r19, r1
  c8:	26 30       	cpi	r18, 0x06	; 6
  ca:	31 05       	cpc	r19, r1
  cc:	58 f4       	brcc	.+22     	; 0xe4 <setPin+0x3e>
		PORTB = 0;
  ce:	15 b8       	out	0x05, r1	; 5
		PORTC = (1 << (pinIndex - 6));
  d0:	c9 01       	movw	r24, r18
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	a9 01       	movw	r20, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <setPin+0x38>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	8a 95       	dec	r24
  e0:	e2 f7       	brpl	.-8      	; 0xda <setPin+0x34>
  e2:	48 b9       	out	0x08, r20	; 8
  e4:	08 95       	ret

000000e6 <lauflicht>:
}

//LEDs
//1-6 on PortB
//7-10 on PortC
void lauflicht(int min, int max){
  e6:	9c 01       	movw	r18, r24
	static int dir = 1;
	static int pin = 0;
	//set light direction
	//if maximum or minimum reached, change direction, else keep 
	dir = ((pin == max && dir > 0) || (pin == min && dir < 0)) ? -dir : dir;
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  f0:	86 17       	cp	r24, r22
  f2:	97 07       	cpc	r25, r23
  f4:	39 f4       	brne	.+14     	; 0x104 <lauflicht+0x1e>
  f6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
  fa:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
  fe:	14 16       	cp	r1, r20
 100:	15 06       	cpc	r1, r21
 102:	4c f0       	brlt	.+18     	; 0x116 <lauflicht+0x30>
 104:	82 17       	cp	r24, r18
 106:	93 07       	cpc	r25, r19
 108:	71 f4       	brne	.+28     	; 0x126 <lauflicht+0x40>
 10a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 10e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 112:	33 23       	and	r19, r19
 114:	44 f4       	brge	.+16     	; 0x126 <lauflicht+0x40>
 116:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 11a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 11e:	31 95       	neg	r19
 120:	21 95       	neg	r18
 122:	31 09       	sbc	r19, r1
 124:	04 c0       	rjmp	.+8      	; 0x12e <lauflicht+0x48>
 126:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 12a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 12e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 132:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
	setPin(pin);
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <setPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <lauflicht+0x5a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lauflicht+0x64>
 14a:	00 00       	nop
	_delay_ms(INTERVAL);
	pin += dir;
 14c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 150:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15c:	82 0f       	add	r24, r18
 15e:	93 1f       	adc	r25, r19
 160:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 168:	08 95       	ret

0000016a <init>:
#include <avr/io.h>
#include "lauflicht.h"

void init() {
	// set pins PB0-PB5 as output
	DDRB = 0b00111111;
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	84 b9       	out	0x04, r24	; 4
	// set pins PC0-PC5 as output
	DDRC = 0b00111111;
 16e:	87 b9       	out	0x07, r24	; 7
 170:	08 95       	ret

00000172 <main>:
	
}

int main(void)
{
	init();	
 172:	0e 94 b5 00 	call	0x16a	; 0x16a <init>
    while(1){
		lauflicht(0,7);
 176:	67 e0       	ldi	r22, 0x07	; 7
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 73 00 	call	0xe6	; 0xe6 <lauflicht>
 182:	f9 cf       	rjmp	.-14     	; 0x176 <main+0x4>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>


2xReadAnalog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a39  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041f  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ac  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ff  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000243f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  9e:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <echo>:
	}
}

char* getPoti(int admux_val){
	return (admux_val & 1) == 0 ? "ADC0" : "ADC1";
}
  a6:	0e 94 0d 01 	call	0x21a	; 0x21a <usart_receive>
  aa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <usart_send>
  ae:	08 95       	ret

000000b0 <main>:
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	80 83       	st	Z, r24
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	87 60       	ori	r24, 0x07	; 7
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	80 83       	st	Z, r24
  d2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
  d6:	80 81       	ld	r24, Z
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	78 94       	sei
  ea:	83 e5       	ldi	r24, 0x53	; 83
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 de 00 	call	0x1bc	; 0x1bc <usart_init>
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x42>

000000f4 <__vector_21>:

ISR(ADC_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	2a 97       	sbiw	r28, 0x0a	; 10
 120:	de bf       	out	0x3e, r29	; 62
 122:	cd bf       	out	0x3d, r28	; 61
	cli();
 124:	f8 94       	cli
	//concatenate HIGH Bits (ADC9 ADC8) to LOW Bits
	ADCvalue = ADCL | (ADCH << 8);
 126:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 12a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	92 2b       	or	r25, r18
 132:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 136:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	char buffer [10];
	//convert integer to string
	itoa(ADCvalue, buffer, 10);
 13a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 13e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 142:	4a e0       	ldi	r20, 0x0A	; 10
 144:	be 01       	movw	r22, r28
 146:	6f 5f       	subi	r22, 0xFF	; 255
 148:	7f 4f       	sbci	r23, 0xFF	; 255
 14a:	0e 94 3c 01 	call	0x278	; 0x278 <__itoa_ncheck>
	
	usart_send_string(getPoti(ADMUX));
 14e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
		// main loop	
	}
}

char* getPoti(int admux_val){
	return (admux_val & 1) == 0 ? "ADC0" : "ADC1";
 152:	80 ff       	sbrs	r24, 0
 154:	03 c0       	rjmp	.+6      	; 0x15c <__vector_21+0x68>
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	02 c0       	rjmp	.+4      	; 0x160 <__vector_21+0x6c>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	91 e0       	ldi	r25, 0x01	; 1
	ADCvalue = ADCL | (ADCH << 8);
	char buffer [10];
	//convert integer to string
	itoa(ADCvalue, buffer, 10);
	
	usart_send_string(getPoti(ADMUX));
 160:	0e 94 fe 00 	call	0x1fc	; 0x1fc <usart_send_string>
	usart_send_string(":  ");
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 fe 00 	call	0x1fc	; 0x1fc <usart_send_string>
	
	usart_send_string(buffer);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 fe 00 	call	0x1fc	; 0x1fc <usart_send_string>
	usart_send_string("\n\r");
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 fe 00 	call	0x1fc	; 0x1fc <usart_send_string>
	//Toggle MUX0 Bit -> Toggle between ADC0 <-> ADC1
	ADMUX ^= (1 << MUX0);
 17c:	ec e7       	ldi	r30, 0x7C	; 124
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	89 27       	eor	r24, r25
 186:	80 83       	st	Z, r24
	sei();
 188:	78 94       	sei
 18a:	2a 96       	adiw	r28, 0x0a	; 10
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <usart_init>:

func f;

void usart_init(func function){
	/*Set baud rate */
	f = function;
 1bc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <f+0x1>
 1c0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <f>
	UBRR0H = (MYUBRR >> 8);
 1c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = MYUBRR;
 1c8:	87 e6       	ldi	r24, 0x67	; 103
 1ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
		
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);      // Enable receiver and transmitter
 1ce:	e1 ec       	ldi	r30, 0xC1	; 193
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);                    // Enable receiver interrupt
 1d8:	80 81       	ld	r24, Z
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
 1de:	e2 ec       	ldi	r30, 0xC2	; 194
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	86 60       	ori	r24, 0x06	; 6
 1e6:	80 83       	st	Z, r24

	sei();                                      // Lets not forget to enable interrupts =P
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <usart_send>:
}
void usart_send(uint8_t toSend){
	 while ( !(UCSR0A & (1 << UDRE0)) ){}
 1ec:	e0 ec       	ldi	r30, 0xC0	; 192
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	90 81       	ld	r25, Z
 1f2:	95 ff       	sbrs	r25, 5
 1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <usart_send+0x4>
		UDR0 = toSend;                       // Write the data to the TX buffer
 1f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1fa:	08 95       	ret

000001fc <usart_send_string>:
}

void usart_send_string(char *data){
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
	while(*data){
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	31 f0       	breq	.+12     	; 0x214 <usart_send_string+0x18>
 208:	21 96       	adiw	r28, 0x01	; 1
		usart_send(*data++);
 20a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <usart_send>
	 while ( !(UCSR0A & (1 << UDRE0)) ){}
		UDR0 = toSend;                       // Write the data to the TX buffer
}

void usart_send_string(char *data){
	while(*data){
 20e:	89 91       	ld	r24, Y+
 210:	81 11       	cpse	r24, r1
 212:	fb cf       	rjmp	.-10     	; 0x20a <usart_send_string+0xe>
		usart_send(*data++);
	}
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <usart_receive>:
uint8_t usart_receive(){
	while ( !(UCSR0A & (1 << RXC0)) ){}
 21a:	e0 ec       	ldi	r30, 0xC0	; 192
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	88 23       	and	r24, r24
 222:	ec f7       	brge	.-6      	; 0x21e <usart_receive+0x4>
	return (uint8_t)UDR0;                       // Read data from the RX buffer
 224:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 228:	08 95       	ret

0000022a <__vector_18>:

ISR (USART_RX_vect){
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	f();
 24c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <f>
 250:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <f+0x1>
 254:	09 95       	icall
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__itoa_ncheck>:
 278:	bb 27       	eor	r27, r27
 27a:	4a 30       	cpi	r20, 0x0A	; 10
 27c:	31 f4       	brne	.+12     	; 0x28a <__itoa_ncheck+0x12>
 27e:	99 23       	and	r25, r25
 280:	22 f4       	brpl	.+8      	; 0x28a <__itoa_ncheck+0x12>
 282:	bd e2       	ldi	r27, 0x2D	; 45
 284:	90 95       	com	r25
 286:	81 95       	neg	r24
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	0c 94 48 01 	jmp	0x290	; 0x290 <__utoa_common>

0000028e <__utoa_ncheck>:
 28e:	bb 27       	eor	r27, r27

00000290 <__utoa_common>:
 290:	fb 01       	movw	r30, r22
 292:	55 27       	eor	r21, r21
 294:	aa 27       	eor	r26, r26
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	aa 1f       	adc	r26, r26
 29c:	a4 17       	cp	r26, r20
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__utoa_common+0x14>
 2a0:	a4 1b       	sub	r26, r20
 2a2:	83 95       	inc	r24
 2a4:	50 51       	subi	r21, 0x10	; 16
 2a6:	b9 f7       	brne	.-18     	; 0x296 <__utoa_common+0x6>
 2a8:	a0 5d       	subi	r26, 0xD0	; 208
 2aa:	aa 33       	cpi	r26, 0x3A	; 58
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <__utoa_common+0x20>
 2ae:	a9 5d       	subi	r26, 0xD9	; 217
 2b0:	a1 93       	st	Z+, r26
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	79 f7       	brne	.-34     	; 0x294 <__utoa_common+0x4>
 2b6:	b1 11       	cpse	r27, r1
 2b8:	b1 93       	st	Z+, r27
 2ba:	11 92       	st	Z+, r1
 2bc:	cb 01       	movw	r24, r22
 2be:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <strrev>

000002c2 <strrev>:
 2c2:	dc 01       	movw	r26, r24
 2c4:	fc 01       	movw	r30, r24
 2c6:	67 2f       	mov	r22, r23
 2c8:	71 91       	ld	r23, Z+
 2ca:	77 23       	and	r23, r23
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <strrev+0x4>
 2ce:	32 97       	sbiw	r30, 0x02	; 2
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <strrev+0x18>
 2d2:	7c 91       	ld	r23, X
 2d4:	6d 93       	st	X+, r22
 2d6:	70 83       	st	Z, r23
 2d8:	62 91       	ld	r22, -Z
 2da:	ae 17       	cp	r26, r30
 2dc:	bf 07       	cpc	r27, r31
 2de:	c8 f3       	brcs	.-14     	; 0x2d2 <strrev+0x10>
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>

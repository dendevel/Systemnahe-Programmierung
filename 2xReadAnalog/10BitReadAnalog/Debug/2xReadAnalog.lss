
2xReadAnalog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002fe  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac8  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b8  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bc  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f1  00000000  00000000  00002337  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  9e:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <getPoti>:

char* getPoti(int admux_val){
	//admux_val & 1 --> AND with 0001 --> Only last Bit is checked
	//If last bit is 0 --> ADC0
	//else --> ADC1
	return (admux_val & 1) == 0 ? "ADC0" : "ADC1";
  a6:	80 ff       	sbrs	r24, 0
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <getPoti+0xa>
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	08 95       	ret
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	91 e0       	ldi	r25, 0x01	; 1
}
  b4:	08 95       	ret

000000b6 <adc_init_10>:

void adc_init_10(){
	ADMUX = 0;      // use ADC0
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
  c2:	80 81       	ld	r24, Z
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);   // Set ADC Auto Trigger Enable
  d2:	80 81       	ld	r24, Z
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	80 83       	st	Z, r24
		
	ADCSRB = 0;               // 0 for free running mode
  d8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

	ADCSRA |= (1 << ADEN);    // Enable the ADC
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);    // Enable Interrupts
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24

	sei();
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <echo>:
#include "adc.h"

volatile uint16_t ADCvalue;    		// Global variable, set to volatile if used with ISR

void echo(){
	usart_send(usart_receive());
  f2:	0e 94 19 01 	call	0x232	; 0x232 <usart_receive>
  f6:	0e 94 02 01 	call	0x204	; 0x204 <usart_send>
  fa:	08 95       	ret

000000fc <main>:
}

int main(void)
{
	adc_init_10();
  fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_init_10>
	usart_init(echo);
 100:	89 e7       	ldi	r24, 0x79	; 121
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <usart_init>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0xc>

0000010a <__vector_21>:
		// main loop	
	}
}

ISR(ADC_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	2a 97       	sbiw	r28, 0x0a	; 10
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	cd bf       	out	0x3d, r28	; 61
	cli();
 13e:	f8 94       	cli
	//concatenate HIGH Bits (ADC9 ADC8) to LOW Bits
	ADCvalue = ADCL | (ADCH << 8);
 140:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 144:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	92 2b       	or	r25, r18
 14c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 150:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	char buffer [10];
	//convert integer to string
	itoa(ADCvalue, buffer, 10);
 154:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 158:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	0e 94 48 01 	call	0x290	; 0x290 <__itoa_ncheck>
	
	usart_send_string(getPoti(ADMUX));
 168:	0c e7       	ldi	r16, 0x7C	; 124
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	f8 01       	movw	r30, r16
 16e:	80 81       	ld	r24, Z
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <getPoti>
 176:	0e 94 0a 01 	call	0x214	; 0x214 <usart_send_string>
	usart_send_string(": ");
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 0a 01 	call	0x214	; 0x214 <usart_send_string>
	
	usart_send_string(buffer);
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	0e 94 0a 01 	call	0x214	; 0x214 <usart_send_string>
	usart_send_string("\n\r");
 18a:	8d e0       	ldi	r24, 0x0D	; 13
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 0a 01 	call	0x214	; 0x214 <usart_send_string>
	//Toggle MUX0 Bit -> Toggle between ADC0 <-> ADC1
	ADMUX ^= (1 << MUX0);
 192:	f8 01       	movw	r30, r16
 194:	90 81       	ld	r25, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	89 27       	eor	r24, r25
 19a:	80 83       	st	Z, r24
	sei();
 19c:	78 94       	sei
 19e:	2a 96       	adiw	r28, 0x0a	; 10
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <usart_init>:
 1d4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <f+0x1>
 1d8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <f>
 1dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1e0:	87 e6       	ldi	r24, 0x67	; 103
 1e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 1e6:	e1 ec       	ldi	r30, 0xC1	; 193
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	88 61       	ori	r24, 0x18	; 24
 1ee:	80 83       	st	Z, r24
 1f0:	80 81       	ld	r24, Z
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	80 83       	st	Z, r24
 1f6:	e2 ec       	ldi	r30, 0xC2	; 194
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	86 60       	ori	r24, 0x06	; 6
 1fe:	80 83       	st	Z, r24
 200:	78 94       	sei
 202:	08 95       	ret

00000204 <usart_send>:
 204:	e0 ec       	ldi	r30, 0xC0	; 192
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	90 81       	ld	r25, Z
 20a:	95 ff       	sbrs	r25, 5
 20c:	fd cf       	rjmp	.-6      	; 0x208 <usart_send+0x4>
 20e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 212:	08 95       	ret

00000214 <usart_send_string>:
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	88 81       	ld	r24, Y
 21c:	88 23       	and	r24, r24
 21e:	31 f0       	breq	.+12     	; 0x22c <usart_send_string+0x18>
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	0e 94 02 01 	call	0x204	; 0x204 <usart_send>
 226:	89 91       	ld	r24, Y+
 228:	81 11       	cpse	r24, r1
 22a:	fb cf       	rjmp	.-10     	; 0x222 <usart_send_string+0xe>
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <usart_receive>:
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 23       	and	r24, r24
 23a:	ec f7       	brge	.-6      	; 0x236 <usart_receive+0x4>
 23c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 240:	08 95       	ret

00000242 <__vector_18>:
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
 264:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <f>
 268:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <f+0x1>
 26c:	09 95       	icall
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	bf 91       	pop	r27
 274:	af 91       	pop	r26
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	7f 91       	pop	r23
 27c:	6f 91       	pop	r22
 27e:	5f 91       	pop	r21
 280:	4f 91       	pop	r20
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__itoa_ncheck>:
 290:	bb 27       	eor	r27, r27
 292:	4a 30       	cpi	r20, 0x0A	; 10
 294:	31 f4       	brne	.+12     	; 0x2a2 <__itoa_ncheck+0x12>
 296:	99 23       	and	r25, r25
 298:	22 f4       	brpl	.+8      	; 0x2a2 <__itoa_ncheck+0x12>
 29a:	bd e2       	ldi	r27, 0x2D	; 45
 29c:	90 95       	com	r25
 29e:	81 95       	neg	r24
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__utoa_common>

000002a6 <__utoa_ncheck>:
 2a6:	bb 27       	eor	r27, r27

000002a8 <__utoa_common>:
 2a8:	fb 01       	movw	r30, r22
 2aa:	55 27       	eor	r21, r21
 2ac:	aa 27       	eor	r26, r26
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	aa 1f       	adc	r26, r26
 2b4:	a4 17       	cp	r26, r20
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <__utoa_common+0x14>
 2b8:	a4 1b       	sub	r26, r20
 2ba:	83 95       	inc	r24
 2bc:	50 51       	subi	r21, 0x10	; 16
 2be:	b9 f7       	brne	.-18     	; 0x2ae <__utoa_common+0x6>
 2c0:	a0 5d       	subi	r26, 0xD0	; 208
 2c2:	aa 33       	cpi	r26, 0x3A	; 58
 2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__utoa_common+0x20>
 2c6:	a9 5d       	subi	r26, 0xD9	; 217
 2c8:	a1 93       	st	Z+, r26
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	79 f7       	brne	.-34     	; 0x2ac <__utoa_common+0x4>
 2ce:	b1 11       	cpse	r27, r1
 2d0:	b1 93       	st	Z+, r27
 2d2:	11 92       	st	Z+, r1
 2d4:	cb 01       	movw	r24, r22
 2d6:	0c 94 6d 01 	jmp	0x2da	; 0x2da <strrev>

000002da <strrev>:
 2da:	dc 01       	movw	r26, r24
 2dc:	fc 01       	movw	r30, r24
 2de:	67 2f       	mov	r22, r23
 2e0:	71 91       	ld	r23, Z+
 2e2:	77 23       	and	r23, r23
 2e4:	e1 f7       	brne	.-8      	; 0x2de <strrev+0x4>
 2e6:	32 97       	sbiw	r30, 0x02	; 2
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <strrev+0x18>
 2ea:	7c 91       	ld	r23, X
 2ec:	6d 93       	st	X+, r22
 2ee:	70 83       	st	Z, r23
 2f0:	62 91       	ld	r22, -Z
 2f2:	ae 17       	cp	r26, r30
 2f4:	bf 07       	cpc	r27, r31
 2f6:	c8 f3       	brcs	.-14     	; 0x2ea <strrev+0x10>
 2f8:	08 95       	ret

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>


Lauflicht-Multiple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000915  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000791  00000000  00000000  00000c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000286  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 04 01 	call	0x208	; 0x208 <main>
  9e:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setPin>:

//set pin on specific port and disable all other leds
//first 6 pins on PortB (index <= 5)
//next 6 pins on PortC (index >= 6)
void setPin(int pinIndex){
	if(pinIndex >= 0 && pinIndex <= 5){
  a6:	86 30       	cpi	r24, 0x06	; 6
  a8:	91 05       	cpc	r25, r1
  aa:	58 f4       	brcc	.+22     	; 0xc2 <setPin+0x1c>
		PORTB = (1 << pinIndex);
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	a9 01       	movw	r20, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <setPin+0x12>
  b4:	44 0f       	add	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <setPin+0xe>
  bc:	45 b9       	out	0x05, r20	; 5
		PORTC = 0;
  be:	18 b8       	out	0x08, r1	; 8
  c0:	08 95       	ret
	}
	else if (pinIndex >= 6 && pinIndex <= 11){
  c2:	9c 01       	movw	r18, r24
  c4:	26 50       	subi	r18, 0x06	; 6
  c6:	31 09       	sbc	r19, r1
  c8:	26 30       	cpi	r18, 0x06	; 6
  ca:	31 05       	cpc	r19, r1
  cc:	58 f4       	brcc	.+22     	; 0xe4 <setPin+0x3e>
		PORTB = 0;
  ce:	15 b8       	out	0x05, r1	; 5
		PORTC = (1 << (pinIndex - 6));
  d0:	c9 01       	movw	r24, r18
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	a9 01       	movw	r20, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <setPin+0x38>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	8a 95       	dec	r24
  e0:	e2 f7       	brpl	.-8      	; 0xda <setPin+0x34>
  e2:	48 b9       	out	0x08, r20	; 8
  e4:	08 95       	ret

000000e6 <addPin>:

//activate pin on specific port
//first 6 pins on PortB (index <= 5)
//next 6 pins on PortC (index >= 6)
void addPin(int pinIndex){
	if(pinIndex >= 0 && pinIndex <= 5){
  e6:	86 30       	cpi	r24, 0x06	; 6
  e8:	91 05       	cpc	r25, r1
  ea:	68 f4       	brcc	.+26     	; 0x106 <addPin+0x20>
		PORTB |= (1 << pinIndex);
  ec:	45 b1       	in	r20, 0x05	; 5
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <addPin+0x14>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <addPin+0x10>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret
	}
	else if (pinIndex >= 6 && pinIndex <= 11){
 106:	9c 01       	movw	r18, r24
 108:	26 50       	subi	r18, 0x06	; 6
 10a:	31 09       	sbc	r19, r1
 10c:	26 30       	cpi	r18, 0x06	; 6
 10e:	31 05       	cpc	r19, r1
 110:	68 f4       	brcc	.+26     	; 0x12c <addPin+0x46>
		PORTC |= (1 << (pinIndex - 6));
 112:	48 b1       	in	r20, 0x08	; 8
 114:	c9 01       	movw	r24, r18
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	b9 01       	movw	r22, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <addPin+0x3c>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	8a 95       	dec	r24
 124:	e2 f7       	brpl	.-8      	; 0x11e <addPin+0x38>
 126:	cb 01       	movw	r24, r22
 128:	84 2b       	or	r24, r20
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	08 95       	ret

0000012e <setMultiplePins>:
	}
}

void setMultiplePins(int pinIndex, int ledCount){
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	8c 01       	movw	r16, r24
 13c:	7b 01       	movw	r14, r22
	setPin(pinIndex);
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <setPin>
	int pin = 1;
	while (pin != ledCount)
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	e8 16       	cp	r14, r24
 146:	f1 04       	cpc	r15, r1
 148:	59 f0       	breq	.+22     	; 0x160 <setMultiplePins+0x32>
 14a:	c1 e0       	ldi	r28, 0x01	; 1
 14c:	d0 e0       	ldi	r29, 0x00	; 0
	{	
		addPin(pinIndex + pin);	
 14e:	c8 01       	movw	r24, r16
 150:	8c 0f       	add	r24, r28
 152:	9d 1f       	adc	r25, r29
 154:	0e 94 73 00 	call	0xe6	; 0xe6 <addPin>
		pin += 1;
 158:	21 96       	adiw	r28, 0x01	; 1
}

void setMultiplePins(int pinIndex, int ledCount){
	setPin(pinIndex);
	int pin = 1;
	while (pin != ledCount)
 15a:	ec 16       	cp	r14, r28
 15c:	fd 06       	cpc	r15, r29
 15e:	b9 f7       	brne	.-18     	; 0x14e <setMultiplePins+0x20>
	{	
		addPin(pinIndex + pin);	
		pin += 1;
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	08 95       	ret

0000016e <lightStep>:

//LEDs
//1-6 on PortB
//7-10 on PortC
void lightStep(int min, int max, int ledCount){
 16e:	fc 01       	movw	r30, r24
	//get the max determined by amount of leds
	max = max - (ledCount - 1);
	
	//set light direction
	//if maximum or minimum reached, change direction, else keep 
	dir = ((pin == max && dir > 0) || (pin == min && dir < 0)) ? -dir : dir;
 170:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 174:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 178:	9a 01       	movw	r18, r20
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	31 09       	sbc	r19, r1
 17e:	db 01       	movw	r26, r22
 180:	a2 1b       	sub	r26, r18
 182:	b3 0b       	sbc	r27, r19
 184:	a8 17       	cp	r26, r24
 186:	b9 07       	cpc	r27, r25
 188:	39 f4       	brne	.+14     	; 0x198 <lightStep+0x2a>
 18a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 18e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 192:	12 16       	cp	r1, r18
 194:	13 06       	cpc	r1, r19
 196:	4c f0       	brlt	.+18     	; 0x1aa <lightStep+0x3c>
 198:	8e 17       	cp	r24, r30
 19a:	9f 07       	cpc	r25, r31
 19c:	71 f4       	brne	.+28     	; 0x1ba <lightStep+0x4c>
 19e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1a2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1a6:	33 23       	and	r19, r19
 1a8:	44 f4       	brge	.+16     	; 0x1ba <lightStep+0x4c>
 1aa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1ae:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1b2:	31 95       	neg	r19
 1b4:	21 95       	neg	r18
 1b6:	31 09       	sbc	r19, r1
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <lightStep+0x54>
 1ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1be:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1c2:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1c6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
	setMultiplePins(pin, ledCount);
 1ca:	ba 01       	movw	r22, r20
 1cc:	0e 94 97 00 	call	0x12e	; 0x12e <setMultiplePins>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	bf ef       	ldi	r27, 0xFF	; 255
 1d2:	23 ed       	ldi	r18, 0xD3	; 211
 1d4:	80 e3       	ldi	r24, 0x30	; 48
 1d6:	b1 50       	subi	r27, 0x01	; 1
 1d8:	20 40       	sbci	r18, 0x00	; 0
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <lightStep+0x68>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lightStep+0x72>
 1e0:	00 00       	nop
	_delay_ms(INTERVAL);
	pin += dir;
 1e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f2:	82 0f       	add	r24, r18
 1f4:	93 1f       	adc	r25, r19
 1f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1fe:	08 95       	ret

00000200 <init>:
#include "lauflicht.h"

/* function implementations */
void init() {
	// set pins PB0-PB5 as output
	DDRB = 0b00111111;
 200:	8f e3       	ldi	r24, 0x3F	; 63
 202:	84 b9       	out	0x04, r24	; 4
	// set pins PC0-PC5 as output
	DDRC = 0b00111111;
 204:	87 b9       	out	0x07, r24	; 7
 206:	08 95       	ret

00000208 <main>:
}

int main(void)
{
	init();	
 208:	0e 94 00 01 	call	0x200	; 0x200 <init>
    while(1){
		lightStep(0,9,9);
 20c:	49 e0       	ldi	r20, 0x09	; 9
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	69 e0       	ldi	r22, 0x09	; 9
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 b7 00 	call	0x16e	; 0x16e <lightStep>
 21c:	f7 cf       	rjmp	.-18     	; 0x20c <main+0x4>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>


Lauflicht-Multiple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fc  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000784  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042b  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000292  00000000  00000000  00001cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 01 01 	call	0x202	; 0x202 <main>
  9e:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <orPin>:
		PORTC = (1 << (pinIndex - 6));
	}
}

void orPin(int pinIndex){
	if(pinIndex >= 0 && pinIndex <= 5){
  a6:	86 30       	cpi	r24, 0x06	; 6
  a8:	91 05       	cpc	r25, r1
  aa:	68 f4       	brcc	.+26     	; 0xc6 <orPin+0x20>
		PORTB |= (1 << pinIndex);
  ac:	45 b1       	in	r20, 0x05	; 5
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	b9 01       	movw	r22, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <orPin+0x14>
  b6:	66 0f       	add	r22, r22
  b8:	77 1f       	adc	r23, r23
  ba:	8a 95       	dec	r24
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <orPin+0x10>
  be:	cb 01       	movw	r24, r22
  c0:	84 2b       	or	r24, r20
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	08 95       	ret
	}
	else if (pinIndex >= 6 && pinIndex <= 11){
  c6:	9c 01       	movw	r18, r24
  c8:	26 50       	subi	r18, 0x06	; 6
  ca:	31 09       	sbc	r19, r1
  cc:	26 30       	cpi	r18, 0x06	; 6
  ce:	31 05       	cpc	r19, r1
  d0:	68 f4       	brcc	.+26     	; 0xec <orPin+0x46>
		PORTC |= (1 << (pinIndex - 6));
  d2:	48 b1       	in	r20, 0x08	; 8
  d4:	c9 01       	movw	r24, r18
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	b9 01       	movw	r22, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <orPin+0x3c>
  de:	66 0f       	add	r22, r22
  e0:	77 1f       	adc	r23, r23
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <orPin+0x38>
  e6:	cb 01       	movw	r24, r22
  e8:	84 2b       	or	r24, r20
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	08 95       	ret

000000ee <setMultiplePins>:
	}
}

void setMultiplePins(int pinIndex, int leds){
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	if(pinIndex >= 0 && pinIndex <= 5){
  fa:	7c 01       	movw	r14, r24
  fc:	86 30       	cpi	r24, 0x06	; 6
  fe:	91 05       	cpc	r25, r1
 100:	70 f4       	brcc	.+28     	; 0x11e <setMultiplePins+0x30>
		PORTB = (1 << pinIndex);
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	a9 01       	movw	r20, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <setMultiplePins+0x20>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <setMultiplePins+0x1c>
 112:	45 b9       	out	0x05, r20	; 5
		PORTC = 0;
 114:	18 b8       	out	0x08, r1	; 8
	else if (pinIndex >= 6 && pinIndex <= 11){
		PORTB = 0;
		PORTC = (1 << (pinIndex - 6));
	}
	int pin = 1;
	while (pin != leds)
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	71 05       	cpc	r23, r1
 11a:	99 f4       	brne	.+38     	; 0x142 <setMultiplePins+0x54>
 11c:	1e c0       	rjmp	.+60     	; 0x15a <setMultiplePins+0x6c>
void setMultiplePins(int pinIndex, int leds){
	if(pinIndex >= 0 && pinIndex <= 5){
		PORTB = (1 << pinIndex);
		PORTC = 0;
	}
	else if (pinIndex >= 6 && pinIndex <= 11){
 11e:	9c 01       	movw	r18, r24
 120:	26 50       	subi	r18, 0x06	; 6
 122:	31 09       	sbc	r19, r1
 124:	26 30       	cpi	r18, 0x06	; 6
 126:	31 05       	cpc	r19, r1
 128:	b0 f7       	brcc	.-20     	; 0x116 <setMultiplePins+0x28>
		PORTB = 0;
 12a:	15 b8       	out	0x05, r1	; 5
		PORTC = (1 << (pinIndex - 6));
 12c:	c9 01       	movw	r24, r18
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	a9 01       	movw	r20, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <setMultiplePins+0x4c>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <setMultiplePins+0x48>
 13e:	48 b9       	out	0x08, r20	; 8
 140:	ea cf       	rjmp	.-44     	; 0x116 <setMultiplePins+0x28>
 142:	8b 01       	movw	r16, r22
	}
	int pin = 1;
	while (pin != leds)
 144:	c1 e0       	ldi	r28, 0x01	; 1
 146:	d0 e0       	ldi	r29, 0x00	; 0
	{	
		orPin(pinIndex + pin);	
 148:	ce 01       	movw	r24, r28
 14a:	8e 0d       	add	r24, r14
 14c:	9f 1d       	adc	r25, r15
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <orPin>
		pin += 1;
 152:	21 96       	adiw	r28, 0x01	; 1
	else if (pinIndex >= 6 && pinIndex <= 11){
		PORTB = 0;
		PORTC = (1 << (pinIndex - 6));
	}
	int pin = 1;
	while (pin != leds)
 154:	0c 17       	cp	r16, r28
 156:	1d 07       	cpc	r17, r29
 158:	b9 f7       	brne	.-18     	; 0x148 <setMultiplePins+0x5a>
	{	
		orPin(pinIndex + pin);	
		pin += 1;
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	08 95       	ret

00000168 <lightStep>:

//LEDs
//1-6 on PortB
//7-10 on PortC
void lightStep(int min, int max, int leds){
 168:	fc 01       	movw	r30, r24
	
	max = max - (leds - 1);
	
	//set light direction
	//if maximum or minimum reached, change direction, else keep 
	dir = ((pin == max && dir > 0) || (pin == min && dir < 0)) ? -dir : dir;
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 16e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 172:	9a 01       	movw	r18, r20
 174:	21 50       	subi	r18, 0x01	; 1
 176:	31 09       	sbc	r19, r1
 178:	db 01       	movw	r26, r22
 17a:	a2 1b       	sub	r26, r18
 17c:	b3 0b       	sbc	r27, r19
 17e:	a8 17       	cp	r26, r24
 180:	b9 07       	cpc	r27, r25
 182:	39 f4       	brne	.+14     	; 0x192 <lightStep+0x2a>
 184:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 188:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 18c:	12 16       	cp	r1, r18
 18e:	13 06       	cpc	r1, r19
 190:	4c f0       	brlt	.+18     	; 0x1a4 <lightStep+0x3c>
 192:	8e 17       	cp	r24, r30
 194:	9f 07       	cpc	r25, r31
 196:	71 f4       	brne	.+28     	; 0x1b4 <lightStep+0x4c>
 198:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 19c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	33 23       	and	r19, r19
 1a2:	44 f4       	brge	.+16     	; 0x1b4 <lightStep+0x4c>
 1a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1a8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1ac:	31 95       	neg	r19
 1ae:	21 95       	neg	r18
 1b0:	31 09       	sbc	r19, r1
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <lightStep+0x54>
 1b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1bc:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1c0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
	setMultiplePins(pin, leds);
 1c4:	ba 01       	movw	r22, r20
 1c6:	0e 94 77 00 	call	0xee	; 0xee <setMultiplePins>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	bf ef       	ldi	r27, 0xFF	; 255
 1cc:	23 ed       	ldi	r18, 0xD3	; 211
 1ce:	80 e3       	ldi	r24, 0x30	; 48
 1d0:	b1 50       	subi	r27, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <lightStep+0x68>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lightStep+0x72>
 1da:	00 00       	nop
	_delay_ms(INTERVAL);
	pin += dir;
 1dc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1e0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ec:	82 0f       	add	r24, r18
 1ee:	93 1f       	adc	r25, r19
 1f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1f8:	08 95       	ret

000001fa <init>:
#include <avr/io.h>
#include "lauflicht.h"

void init() {
	// set pins PB0-PB5 as output
	DDRB = 0b00111111;
 1fa:	8f e3       	ldi	r24, 0x3F	; 63
 1fc:	84 b9       	out	0x04, r24	; 4
	// set pins PC0-PC5 as output
	DDRC = 0b00111111;
 1fe:	87 b9       	out	0x07, r24	; 7
 200:	08 95       	ret

00000202 <main>:
	
}

int main(void)
{
	init();	
 202:	0e 94 fd 00 	call	0x1fa	; 0x1fa <init>
    while(1){
		lightStep(0,9,3);
 206:	43 e0       	ldi	r20, 0x03	; 3
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	69 e0       	ldi	r22, 0x09	; 9
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 b4 00 	call	0x168	; 0x168 <lightStep>
 216:	f7 cf       	rjmp	.-18     	; 0x206 <main+0x4>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
